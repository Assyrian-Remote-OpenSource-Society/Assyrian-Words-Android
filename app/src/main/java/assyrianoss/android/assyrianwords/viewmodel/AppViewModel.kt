/**
 * Copyright 2019 Assyrian Remote Open Source Society
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

package assyrianoss.android.assyrianwords.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.LiveData
import assyrianoss.android.assyrianwords.model.persistence.entities.Category
import assyrianoss.android.assyrianwords.model.persistence.entities.Word

class AppViewModel(application: Application) : AndroidViewModel(application) {

    val repository: AppRepository = AppRepository(application)
    var categories: LiveData<List<Category>>
    var entireWordsTable: LiveData<List<Word>>
    lateinit var queriedWords: LiveData<List<Word>>
    lateinit var queriedWord: LiveData<Word>

    init {
        categories = repository.readAllCategories()
        entireWordsTable = repository.readEntireWordsTable()
    }

    fun fetchAllKnownDataSets() {
        repository.fetchAllKnownDataSets()
    }

    fun insertCategory(category: Category) {
        repository.insertCategory(category)
    }

    fun insertWord(word: Word) {
        repository.insertWord(word)
    }

    fun getFilteredWords(category: String): List<Word>? {
        return entireWordsTable.value?.filter {
            it.category == category
        }
    }

    fun removeQueriedWordsObservers(owner: LifecycleOwner) {
        removeObserver(queriedWords, owner)
    }

    fun removeObserver(liveData: LiveData<List<Word>>, owner: LifecycleOwner) {
        liveData.removeObservers(owner)
    }

    fun getNewWords(category: String): LiveData<List<Word>> {
        queriedWords = repository.readWords(category)
        return queriedWords
    }

    /**
     * The advantage in making a Room query is that,
     * if this word is updated while the user is looking
     * at it (in the Detail screen), then it gets updated
     * live â€“ as the user is looking at the screen.
     *
     * Keep a reference with queriedWord, so that Observers
     * on the object can be removed, where need be.
     */
    fun getWord(wordId: Int): LiveData<Word> {
        queriedWord = repository.readWord(wordId)
        return queriedWord
    }

    /**
     * Useful for testing where the autogenerated ID is unknown.
     */
    fun getWord(easternAssyriac: String): LiveData<Word> {
        queriedWord = repository.readWord(easternAssyriac)
        return queriedWord
    }

    fun getCategory(id: Int): LiveData<Category> {
        return repository.readCategory(id)
    }
}